== README

Devise インストールまとめ

=== 公式Githubリポジトリ

https://github.com/plataformatec/devise

=== Devise wiki

https://github.com/plataformatec/devise/wiki

=== インストール方法

gemfileに以下を記述

 gem 'devise'
 
ターミナルで以下を実行しインストール

 bundle install
 
devise関連のファイルを追加インストールする

 rails g devise:install

※５つのstepが表示されるので順番に消化

1 config/environments/development.rbに以下を追加

 config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

2 root_url(トップページ)の指定。今回はuserコントローラを作成しindexアクションをrootにする。

 rails g controller users

app/controllers/users_controller.rb

    class UsersController < ApplicationController
      def index
      end
    end
    
app/config/routes.rbに以下を追加

  root 'users#index'

3 app/views/layouts/application.html.erb へflashメッセージを設定。

  <p class="notice"><%= notice %></p>
  <p class="alert"><%= alert %></p>

4 Rails3.2用の設定なのでrails4では不要

5 Deviseの見た目をカスタマイズするためのview郡を生成

 rails g devise:views

以下のview群ができあがる。

app/views/devise/shared/_links.html.erb (リンク用パーシャル)

app/views/devise/confirmations/new.html.erb (認証メールの再送信画面)

app/views/devise/passwords/edit.html.erb (パスワード変更画面)

app/views/devise/passwords/new.html.erb (パスワードを忘れの際、メールを送る画面)

app/views/devise/registrations/edit.html.erb (ユーザー情報変更画面)

app/views/devise/registrations/new.html.erb (ユーザー登録画面)

app/views/devise/sessions/new.html.erb (ログイン画面)

app/views/devise/unlocks/new.html.erb (ロック解除メール再送信画面)

app/views/devise/mailer/confirmation_instructions.html.erb (メール用アカウント認証文)

app/views/devise/mailer/reset_password_instructions.html.erb (メール用パスワードリセット文)

app/views/devise/mailer/unlock_instructions.html.erb (メール用ロック解除文)

== 10個のモジュールについて

Database Authenticatable: データベースへ暗号化されたパスワードで保存し、これを用いた認証をする

Omniauthable: OmniAuth（https://github.com/intridea/omniauth）を使用しソーシャルログインを実装する場合

Confirmable: 認証メールを再送信する

Recoverable: パスワードをリセットして通知する機能

Registerable: 登録処理を通してユーザーをサインアップ。ユーザーに自身のアカウントを編集したり削除することを許可

Rememberable: 保存されたcookieからユーザーを記憶するためのトークンを生成・削除

Trackable: サインイン回数や、サインイン時間、IPアドレスを記録

Timeoutable: 一定時間活動していないアカウントのセッションを破棄

Validatable: Emailやパスワードのバリデーション設定 独自に定義したバリデーションを追加も可能

Lockable: 一定回数サインインを失敗するとアカウントをロック ロック解除にはメールによる解除か一定時間経過で解除される方法がある

== deviseでモデルを作る

今回はuserモデルを作るため以下コマンドを入力 (user部分はモデル名に合わせて変更すること、deviseで複数モデルを作ることも可能)

 rails g devise User
 
※モデル名は先頭を大文字にしたキャメルケースで指定する癖を付けることを推奨。単数形で指定すること。

マイグレーションファイル及びモデルが生成される。

デフォルトで生成されるマイグレーションファイルは以下のようになる。

 db/migrate/タイムスタンプ_devise_create_users.rb
 
    class DeviseCreateUsers < ActiveRecord::Migration
      def change
        create_table(:users) do |t|
          ## Database authenticatable
          t.string :email,              null: false, default: ""
          t.string :encrypted_password, null: false, default: ""
    
          ## Recoverable
          t.string   :reset_password_token
          t.datetime :reset_password_sent_at
    
          ## Rememberable
          t.datetime :remember_created_at
    
          ## Trackable
          t.integer  :sign_in_count, default: 0, null: false
          t.datetime :current_sign_in_at
          t.datetime :last_sign_in_at
          t.string   :current_sign_in_ip
          t.string   :last_sign_in_ip
    
          ## Confirmable
          # t.string   :confirmation_token
          # t.datetime :confirmed_at
          # t.datetime :confirmation_sent_at
          # t.string   :unconfirmed_email # Only if using reconfirmable
    
          ## Lockable
          # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
          # t.string   :unlock_token # Only if unlock strategy is :email or :both
          # t.datetime :locked_at
    
    
          t.timestamps null: false
        end
    
        add_index :users, :email,                unique: true
        add_index :users, :reset_password_token, unique: true
        # add_index :users, :confirmation_token,   unique: true
        # add_index :users, :unlock_token,         unique: true
      end
    end

database_authenticatable、registerable、recoverable、recoverable、recoverable、validatable用のカラムが設定されている。各種モジュールを使用する場合はコメントアウトを外してマイグレーション

modelにも必要なモジュールを追加しておく。

 app/models/user.rb
 
    class User < ActiveRecord::Base
      # Include default devise modules. Others available are:
      # :confirmable, :lockable, :timeoutable and :omniauthable
      devise :database_authenticatable, :registerable,
             :recoverable, :rememberable, :trackable, :validatable
    end

マイグレーションファイルの適用

 rake db:migrate

== ルートの確認をしておく。

 rake routes

結果を確認

                      Prefix Verb   URI Pattern                    Controller#Action
            new_user_session GET    /users/sign_in(.:format)       devise/sessions#new
                user_session POST   /users/sign_in(.:format)       devise/sessions#create
        destroy_user_session DELETE /users/sign_out(.:format)      devise/sessions#destroy
               user_password POST   /users/password(.:format)      devise/passwords#create
           new_user_password GET    /users/password/new(.:format)  devise/passwords#new
          edit_user_password GET    /users/password/edit(.:format) devise/passwords#edit
                             PATCH  /users/password(.:format)      devise/passwords#update
                             PUT    /users/password(.:format)      devise/passwords#update
    cancel_user_registration GET    /users/cancel(.:format)        devise/registrations#cancel
           user_registration POST   /users(.:format)               devise/registrations#create
       new_user_registration GET    /users/sign_up(.:format)       devise/registrations#new
      edit_user_registration GET    /users/edit(.:format)          devise/registrations#edit
                             PATCH  /users(.:format)               devise/registrations#update
                             PUT    /users(.:format)               devise/registrations#update
                             DELETE /users(.:format)               devise/registrati
                         
== model名をuserにした場合の用意されている3つのメソッド

1 ログイン中のユーザー nil/ログイン中のuserオブジェクト

 current_user

2 ログイン中かどうか true/false

 user_signed_in?
 
3 セッション情報 初期値は空
 
 user_session
 
== viewにログインやログアウトのリンクをつける

app/views/layouts/application.html.erb

    ...上部省略
    <body>
    <header>
      <nav>
        <!-- ログインしている場合はユーザー情報編集とログアウトボタンを表示 -->
        <% if user_signed_in? %> 
    
          <strong><%= current_user.email %></strong>でログイン中です。 
          <%= link_to 'TOP', root_path %> | 
          <%= link_to 'ユーザー情報編集', edit_user_registration_path %> |
          <%= link_to 'ログアウト', destroy_user_session_path, method: :delete %>
        
        <!-- ログインしていない場合は登録ボタンとログインボタンを表示 -->
        <% else %>
        
          <%= link_to 'ユーザー登録', new_user_registration_path %> |
          <%= link_to 'ログイン', new_user_session_path %>
        
        <% end %>
      </nav>
    </header>
    
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
    
    <%= yield %>
    
    </body>
    </html>
    
== i18nによる日本語化

1 app/config/application.rb を修正

 #config.i18n.default_locale = :de

とコメントアウトされている部分を変更

 config.i18n.default_locale = :ja
 
2 app/congig/locales/ 以下に下記URLからダウンロードしたdevise.ja.ymlを配置する。

https://gist.github.com/yhara/606476

3 一部不足しているエラーメッセージの追加例

      not_saved:
        one: "１つのエラーがあります。修正して再度送信して下さい。:"
        other: "%{count}のエラーがあります。修正して再度送信して下さい。"
      taken: "は既に使用されています。"
      blank: "が入力されていません。"
      too_short: "は%{count}文字以上に設定して下さい。"
      too_long: "は%{count}文字以下に設定して下さい。"
      invalid: "は有効でありません。"
      confirmation: "が内容とあっていません。"

※yamlファイルは2インデントとなり、インデントがおかしい場合はエラーになる。

4 サーバが起動中の場合は再起動させる。

